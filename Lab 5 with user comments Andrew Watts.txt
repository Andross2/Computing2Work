//
//  main.c
//  lab5
//
//  Created by Chuong Vu on 5/31/17.
//  Copyright © 2017 Chuong Vu. All rights reserved.
//

/* Standard Header file and LearnCS!-specific elevator header file. */
#include <stdio.h>
/* Display elevator and elevator control buttons. */
#include <elevator.h>

int main(int argc, char * argv[]) /* Function main file for program. */

{
    /* Enumerated data type. With 7 values. These values will be used by the program to move the elevator around. */
    // These values will also open and close the elevator doors.
    enum ElevatorState 
    {
        ElevatorState_DoorsFullyClosed,      // States are for cases which start at a state of 0
        ElevatorState_DoorsAreOpening,       // State 1
        ElevatorState_DoorsFullyOpen,        // State 2
        ElevatorState_DoorsAreClosing,       // State 3
        ElevatorState_MovingBetweenFloors,   // State 4
        ElevatorState_ReachedTheFirstFloor,  // State 5
        ElevatorState_ReachedTheSecondFloor  // State 6
        
    };
    
    /* integer variable event used for timer,. Variable i is a counter that syncs with timer (three second timer synced with three counter variables i). */
    int     event, i; 
    
    /* Converts ElevatorState values into variable state labels. */
    enum ElevatorState state;
    
    /* 1st state. Elevator is closed. */
    state = ElevatorState_DoorsFullyClosed; 
    
    // counter i is looping with state. Moving from counter 0 to 3 no matter what state the elevator is in such as waiting, or moving down a floor.
    i = 0; 

    // Begin the main loop. This loops forever; it has no terminating condition.
    for (;;)
    {
        // Get any pending event, if one exists
        event = elevatorGetEvent();
        
        // See what we got
        switch(event)
        {
	    	case 0 :        // Nothing has happened
                // There is no pending event. We have nothing to do.
                if(state == ElevatorState_DoorsFullyOpen && i == 3) {
                    elevatorCloseDoors(); /* If elevators are open and 3 seconds or ticks have passed. Close doors. */
                }
		/*End of case 0. Case returns to switch waits for an event such as a call to another switch. If no button or elevator call is used. Loop will continue to use case 100. */
                break; 
		
                
	        case 1 :        // UP button was pressed
                // The "UP" (Floor 2) button has been pressed. Begin moving up.
                if (state == ElevatorState_ReachedTheSecondFloor) {
                    break;

		/* Change the state to moving between floors and direct the elevator to move up if doors are fully closed and not partially or fully open. */
                } else if ( state == ElevatorState_DoorsFullyClosed && state != ElevatorState_DoorsAreOpening && state != ElevatorState_DoorsFullyOpen && state != ElevatorState_DoorsAreClosing) {
                    state = ElevatorState_MovingBetweenFloors;
                    elevatorUp();

		// Otherwise, direct doors to close.
                } else if( state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen || state == ElevatorState_DoorsAreClosing) {
                    elevatorCloseDoors();
                }
                break;
                
                case 2 :        // DOWN button was pressed
                // The "DOWN" (Floor 1) button has been pressed. Begin moving down.
                if (state == ElevatorState_ReachedTheFirstFloor) {
                    break;
                }
                /* Change the state to moving between floors and direct the elevator to move down if doors are fully closed and not partially or fully open. */
                if ( state == ElevatorState_DoorsFullyClosed && state != ElevatorState_DoorsAreOpening && state != ElevatorState_DoorsFullyOpen && state != ElevatorState_DoorsAreClosing) {
                    state = ElevatorState_MovingBetweenFloors;
                    elevatorDown();

		// Otherwise, direct doors to close.
                } else if( state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen || state == ElevatorState_DoorsAreClosing) {
                    elevatorCloseDoors();
                }
                break;
                
		case 3 :        // OPEN button was pressed
                // The "OPEN" button has been pressed. Open the doors.
                i = 0; 		// Resets the timer
		// Open doors if elevator is not moving between floors or while doors are closing or fully closed. 
                if( state != ElevatorState_MovingBetweenFloors || state == ElevatorState_DoorsAreClosing || state == ElevatorState_DoorsFullyClosed) {
                    elevatorOpenDoors(); 		
                }
                break;
                
		case 4 :        // CLOSE button was pressed
                // The "CLOSE" button has been pressed. Close the doors.
                // Close doors if elevator is not moving between floors or while doors are opening or fully opened.   
		if( state != ElevatorState_MovingBetweenFloors || state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen) {
                    elevatorCloseDoors();   
                }
                break;
                
	        case 5 :        // Elevator reached the second floor
                printf("The elevator is at floor 2\n"); 
                state = ElevatorState_MovingBetweenFloors;
                state = ElevatorState_ReachedTheSecondFloor;
                elevatorOpenDoors();
                break;
                
//  		case 6 :        // Elevator reached the first floor
//              printf("The elevator is at floor 1\n");
//            	state = ElevatorState_MovingBetweenFloors;
//          	state = ElevatorState_ReachedTheFirstFloor;
//        	elevatorOpenDoors();
//      	break;
// Above causes program to error.
                
                case 7 :        
		// Elevator doors are now at the fully open position
                printf("The elevator doors are fully open\n");
                state = ElevatorState_DoorsFullyOpen;
                break;
                
                case 8 :
		// Elevator doors are now at the fully closed position
                printf("The elevator doors are fully closed\n");
                state = ElevatorState_DoorsFullyClosed; 
                break;
                
                case 100 :     
		// Timer: one second has elapsed since last Timer event
                printf("Tick event=%d state=%d i=%d\n",event,state,i);
                
		// Count loop from 3 to 0. Increments up tp 3 again from 0. 
                if ( i == 3)
                    i = 0; 
                else
                    i++;
                
                break; 
		/* Case 100. Tick event = 100. Always 100 for tick event. Followed by state = whatever value is being used in ElevatorState. Could be 1 2 or 3. Increments.
		// Example state = 0; ElevatorState_DoorsFullyClosed. 
    
       	} 
    }
} /* Extra brace for LearnCS compiler/ C file. */