//
//  main.c
//  lab5
//
//  Created by Chuong Vu on 5/31/17.
//  Copyright © 2017 Chuong Vu. All rights reserved.
//

#include <stdio.h>
#include <elevator.h>
/* Standard Header file and LearnCS!-specific elevator header file. Display elevator and elevator control buttons. */

int main(int argc, char * argv[]) /* Function main file for program. */

{
    enum ElevatorState /* Enumerated data type. With 7 values. These values will be used by the program to move the elevator around. 
	// These values will also open and close the elevator doors.
    {
        ElevatorState_DoorsFullyClosed, /* States are for cases which start at a state of 0. */
        ElevatorState_DoorsAreOpening, // State 1.
        ElevatorState_DoorsFullyOpen, // State 2.
        ElevatorState_DoorsAreClosing, // State 3.
        ElevatorState_MovingBetweenFloors, // State 4.
        ElevatorState_ReachedTheFirstFloor, // State 5.
        ElevatorState_ReachedTheSecondFloor // State 6.
        
    };
    
    int     event, i; /* integer variable event used for timer,. Variable i is a counter that syncs with timer (three second timer synced with three counter variables i). */
    
    enum ElevatorState state; /* Converts ElevatorState values into variable state. */
    
    state = ElevatorState_DoorsFullyClosed; /* 1st state. Elevator is closed. */
    
    i = 0; // counter i is looping with state. Moving from counter 0 to 3 no matter what state the elevator is in such as waiting, or moving down a floor.
    // Begin the main loop. This loops forever; it has no terminating condition.
    for (;;)
    {
        // Get any pending event, if one exists
        event = elevatorGetEvent();
        
        // See what we got
        switch(event)
        {
      // 1      case 0 :        // Nothing has happened
                // There is no pending event. We have nothing to do.
                if(state == ElevatorState_DoorsFullyOpen && i == 3) {
                    elevatorCloseDoors(); /* If elevators are open and 3 seconds or ticks have passed. Close doors. */
                }
                
                break; /* Stops. Case returns to switch waits for an event such as a call to another switch. If no button or elevator call is used. Loop will continue to use case 100. */
		/* Timer is case 100. */
                
      // 2      case 1 :        // UP button was pressed
                // The "UP" (Floor 2) button has been pressed. Begin moving up.
                if (state == ElevatorState_ReachedTheSecondFloor) {
                    break;
                } else if ( state == ElevatorState_DoorsFullyClosed && state != ElevatorState_DoorsAreOpening && state != ElevatorState_DoorsFullyOpen && state != ElevatorState_DoorsAreClosing) {
                    state = ElevatorState_MovingBetweenFloors; /* Elevator doors are closed. Doors are not allowed to be open. Verified for both open door cases if someone attempts to open elevator moving between floors.
                    elevatorUp();
                } else if( state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen || state == ElevatorState_DoorsAreClosing) {
                    elevatorCloseDoors(); // maintains condtion that doors will open, fully open, and then close once the floor has been reached. Or if 1 button is clicked many times door will open then close.
                  // Can be used to to keep doors closed if close button is pressed twice.
  		  // Can be used to to keep doors open if open button is pressed twice.
                }
                break;
                
      // 3      case 2 :        // DOWN button was pressed
                // The "DOWN" (Floor 1) button has been pressed. Begin moving down.
                if (state == ElevatorState_ReachedTheFirstFloor) {
                    break;
                }
                
                if ( state == ElevatorState_DoorsFullyClosed && state != ElevatorState_DoorsAreOpening && state != ElevatorState_DoorsFullyOpen && state != ElevatorState_DoorsAreClosing) {
                    state = ElevatorState_MovingBetweenFloors; // Maintains doors will be closed fully while moving down. State 0.
                    elevatorDown();
                } else if( state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen || state == ElevatorState_DoorsAreClosing) {
                    elevatorCloseDoors();
                }
                break;
                
      // 4      case 3 :        // OPEN button was pressed
                // The "OPEN" button has been pressed. Open the doors.
                i = 0;
                if( state != ElevatorState_MovingBetweenFloors || state == ElevatorState_DoorsAreClosing || state == ElevatorState_DoorsFullyClosed) {
                    elevatorOpenDoors(); // Condition states if elevator is not moving between floors or while doors are closing or fully closed. Open door button will initiate. 
		
                }
                break;
                
      // 5      case 4 :        // CLOSE button was pressed
                // The "CLOSE" button has been pressed. Close the doors.
                if( state != ElevatorState_MovingBetweenFloors || state == ElevatorState_DoorsAreOpening || state == ElevatorState_DoorsFullyOpen) {
                    elevatorCloseDoors(); // Condition states if elevator is not moving between floors or while doors are opening or fully opened. Close door button will initiate.  
                }
                break;
                
      // 6      case 5 :        // Elevator reached the second floor
                printf("The elevator is at floor 2\n"); // stated in terminal.
                state = ElevatorState_MovingBetweenFloors;
                state = ElevatorState_ReachedTheSecondFloor;
                elevatorOpenDoors();
                break;
                
      // 7      case 6 :        // Elevator reached the first floor
                printf("The elevator is at floor 1\n");
                state = ElevatorState_MovingBetweenFloors;
                state = ElevatorState_ReachedTheFirstFloor;
                elevatorOpenDoors();
                break;
                
      // 8      case 7 :        // Elevator doors are now at the fully open position
                printf("The elevator doors are fully open\n");
                state = ElevatorState_DoorsFullyOpen;
                break;
                
      // 9      case 8 :        // Elevator doors are now at the fully closed position
                printf("The elevator doors are fully closed\n");
                state = ElevatorState_DoorsFullyClosed; 
                break;
                
      // 10     case 100 :      // Timer: one second has elapsed since last Timer event
                printf("Tick event=%d state=%d i=%d\n",event,state,i);
                
                if ( i == 3)
                    i = 0; // Count loop from 3 to 0. Increments up tp 3 again from 0. 
                else
                    i++;
                
                break; /* Case 100. Tick event = 100. Always 100 for tick event. Followed by state = whatever value is being used in ElevatorState. Could be 1 2 or 3. Increments.
		// Example state = 0; ElevatorState_DoorsFullyClosed. 
    
       	} 
    }
} /* Extra brace for LearnCS compiler/ C file. */